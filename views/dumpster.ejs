<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dumpster FIRE - Profile</title>
    <link rel='stylesheet' href='/stylesheets/dumpster.css' />
    <script src="/javascripts/jquery-3.x-git.min.js"></script>
    <script src="/javascripts/chart/Chart.js"></script>
    <%- include('common.ejs') %>


</head>
<!-- <script src="/javascripts/dumpsterInfo.js"></script> -->

<style>
    div.background {
        z-index: 1;
        position: absolute;
        top: 50px;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.2);
        width: 80%;
        display: none;
    }

    div.input {
        margin: 200px auto;
        width: max-content;
        background-color: white;
    }

    .input {
        padding: 10px;
    }

    .input h2 {
        margin: 5px;
    }
</style>

<% var dumpsterid=dumpster.DumpsterID %>
    <script type="text/javascript">

        function init() {
            $(document).ready(function () {
                let driverID = 0;
               
                $('.btn.assign-driver').click(function () {
                    $('.background').toggle();
                    console.log("Assign driver");
                });

                $('.btn.next').click(function () {
                    driverID = $('#driver').val();
                    $('.background').toggle();

                    let req = {
                        DriverID: driverID,
                        Dumpsters: [DumpsterID]
                    };
                    console.log("req", req);
                    $.post('/api/assign-driver', req, function (data) {
                        if (data.success) {
                            console.log('success');
                            showMessage('Message', 'Driver is assigned!');
                            // location.href = "/dumpster/" + data.sensor.DumpsterID;
                            location.reload();
                        } else {
                            console.log(data.error);
                            showMessage('Error', data.error, 'Error');
                        }
                    });
                });

                $('.btn.remove-driver').click(function () {
                    console.log("Remove driver");
                    window.location.replace("/dumpster/remove/<%= dumpster.DumpsterID %>");
                });

                $('div.background').click(function (e) {
                    console.log(e);
                    let background = document.getElementsByClassName('background')[0];
                    if (e.target == background) {
                        $('.background').hide();
                    }

                });

                $('.btn.cancel').click(function () {
                    // selection = false;
                    // selected = {};
                    // $('.select-dumpsters').hide();
                    // updateMarkers();
                    console.log("alert driver is pressed");
                    let desDriver = $('#desDriver').text().trim();
                    let desID = $('#dID').text().trim();
                    console.log(desDriver);
                    console.log(desID);
                    console.log(DumpsterID);
                    if(desDriver === "None") {
                        showMessage('Error','No driver is assigned');
                    }
                    else {
                        let req = {
                        DriverID: desID,
                        Driver: desDriver,
                        Dumpster: DumpsterID
                    };
                        console.log(req);
                    $.post('/driver/sendAlert', req, function(data) {
                        if (data.success) {
                            console.log('success');
                            showMessage('Message', 'Alert has been sent');
                            // location.href = "/dumpster/" + data.sensor.DumpsterID;
                            location.reload();
                        } else {
                            console.log(data.error);
                            showMessage('Error', data.error, 'Error occured');
                        }
                    });

                }
                });



            });

            fetch('/api/drivers', {
                method: 'get',
            })
                .then((res) => {
                    return res.json();
                })
                .then((data) => {
                    console.log(data);
                    $.each(data, function (i, item) {
                        $('#driver').append($('<option>', {
                            value: item.UserID,
                            text: item.FirstName + ' ' + item.LastName
                        }));
                    });
                })
                .catch((err) => console.log(err));

        }

        init();
        var DumpsterID = "<%= dumpsterid %>";
        console.log(DumpsterID);
        $(document).ready(function () {
            var ctx = document.getElementById('myChart').getContext('2d');
            $.get('/dumpster/history/' + DumpsterID, function (d) {
                console.log(d);
                var scatterChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: d.map(i => new Date(i.label).toLocaleDateString()), //changing this for testng
                        datasets: [{
                            label: 'Fullness Level',
                            data: d,
                            backgroundColor: '#000',
                            fill: false,
                            borderColor: 'rgba(100, 0, 0, 1.0)',
                            pointRadius: 10,
                        }]
                    },

                    options: {
                        title: {
                            text: "The fullness levels of the selected dumpster",
                            fontSize: 40,
                            fontColor: '#000',
                            display: false
                        },
                        legend: { labels: { fontColor: `rgb(255,0,0)`, fontSize: 24 } },
                        tooltips: {
                            bodyFontSize: 18,
                            titleFontSize: 18
                        },
                        scales: {
                            yAxes: [{
                                ticks: {

                                    fontStyle: 'Bold',
                                    fontSize: 20,
                                    fontColor: '#fff',

                                    callback: function (label, index, labels) {
                                        return index % 2 === 0 ? label : '';
                                    }
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Fullness',
                                    fontColor: '#ff0000',
                                    fontSize: 24,
                                    fontStyle: 'Bold'
                                }
                            }],
                            xAxes: [{

                                ticks: {

                                    fontStyle: 'Bold',
                                    fontSize: 20,
                                    fontColor: '#fff',

                                    callback: function (label, index, labels) {
                                        console.log("here");
                                        console.log(labels);
                                        return index % 2 === 0 ? label : '';
                                    }
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: 'Date',
                                    fontColor: '#ff0000',
                                    fontSize: 24,
                                    fontStyle: 'Bold'
                                }
                            }]
                        }
                    }




                });

            });
        });


    </script>

    <body>
        <%- include('messageBox.ejs') %>
            <%- include('header.ejs') %>
                <div class="wrapper">
                    <%- include('nav.ejs') %>
                        <div class="content">

                            <div class="container">

                                <div class="col-3">
                                    <h1 class="title">Dumpster Information </h1>
                                    <div class="form">
                                        <label for="">Location: </label>
                                        <label for="">Calgary </label>
                                        <label for="">Designated Driver: </label>
                                        <label for="desDriver" id = "desDriver">
                                            <% if(driver){ %>
                                                <%= driver.FirstName + ' ' + driver.LastName %>
                                                    <% } else { %>
                                                        None
                                                        <% } %>
                                        </label>
                                        <label class="hidden" id = "dID" for="dID">
                                            <% if(driver){ %>
                                                <%= driver.DriverID %>
                                                    <% } else { %>
                                                        None
                                                        <% } %>
                                        </label>
                                        <label for="">Fullness Status: </label>
                                        <label for="">
                                            <%= dumpster.FullnessLevel %>%
                                        </label>
                                        <label for="">Battery Status: </label>
                                        <label for="">
                                            <%= dumpster.BatteryLevel %>%
                                        </label>
                                        <label for="">Estimated fill up date: </label>
                                        <label for="">2020/11/20</label>

                                    </div>
                                    <div class="btn-container">
                                        <button class="btn assign-driver">Add/Change Driver</button>
                                        <button class="btn cancel">Alert Driver</button>
                                        <button class="btn remove-driver">Remove Driver</button>
                                    </div>
                                </div>
                                <canvas id="myChart" width="400" height="400"></canvas>

                            </div>

                            <div class="background">
                                <div class="input">
                                    <h2 class="title">Assign Driver</h2>
                                    <label for="driver">Driver:</label>
                                    <select name="driver" id="driver">
                                    </select>
                                    <input class='btn next' type="button" value="Next">
                                </div>
                            </div>


                        </div>
                </div>
    </body>

</html>